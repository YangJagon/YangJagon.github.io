<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>终端设置代理</title>
    <link href="/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86.html"/>
    <url>/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h1 id="终端设置代理"><a href="#终端设置代理" class="headerlink" title="终端设置代理"></a>终端设置代理</h1><p>当我们通过境内网络在终端使用“<strong>git</strong>”或“<strong>pip</strong>”等软件时，由于他们的服务器都在国外，访问、下载速度非常慢。因此搜索学习了在终端设置代理，加快访问速度，并记录一下。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>首先需要准备一个设置好代理服务器的代理软件，并在软件中查看对应的通信方式及端口。如我使用的是v2ray，从下图中可以看到该客户端包含的两种通信方式及其对应的两个端口分别是：</p><pre><code class="hljs bash">socks5://127.0.0.1:10808http://127.0.0.1:10809</code></pre><p><img src="/images/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/v2ray.png" srcset="/img/loading.gif" alt="v2ray"></p><h2 id="设置命令"><a href="#设置命令" class="headerlink" title="设置命令"></a>设置命令</h2><p>在不同的终端里，代理设置的命令不尽相同。</p><h3 id="Cmd"><a href="#Cmd" class="headerlink" title="Cmd"></a>Cmd</h3><p>在Windows使用的cmd里，设置命令如下：</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置全部代理</span><span class="hljs-built_in">set</span> all_proxy=socks5://127.0.0.1:10808<span class="hljs-built_in">set</span> all_proxy=http://127.0.0.1:10809<span class="hljs-comment"># 设置http和https的代理</span><span class="hljs-built_in">set</span> http_proxy=socks5://127.0.0.1:10808<span class="hljs-built_in">set</span> https_proxy=socks5://127.0.0.1:10808<span class="hljs-built_in">set</span> http_proxy=http://127.0.0.1:10809<span class="hljs-built_in">set</span> https_proxy=http://127.0.0.1:10809<span class="hljs-comment"># 设置http和https代理的用户名和密码（通常不用）</span><span class="hljs-built_in">set</span> http_proxy_user=user<span class="hljs-built_in">set</span> http_proxy_pass=pass<span class="hljs-built_in">set</span> https_proxy_user=user<span class="hljs-built_in">set</span> https_proxy_pass=pass<span class="hljs-comment"># 恢复，清除代理</span><span class="hljs-built_in">set</span> http_proxy=<span class="hljs-built_in">set</span> https_proxy=<span class="hljs-comment"># 设置不走代理的网站ip，用逗号隔开</span><span class="hljs-built_in">set</span> no_proxy=192.168.*.*,*.<span class="hljs-built_in">local</span>,localhost,127.0.0.1</code></pre><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>在Linux和Mac里使用的bash里，只需把相应命令的“<strong>set</strong>”换成“<strong>export</strong>”即可：</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置全部代理</span><span class="hljs-built_in">export</span> all_proxy=socks5://127.0.0.1:10808<span class="hljs-built_in">export</span> all_proxy=http://127.0.0.1:10809<span class="hljs-comment"># 设置http和https的代理</span><span class="hljs-built_in">export</span> http_proxy=socks5://127.0.0.1:10808<span class="hljs-built_in">export</span> https_proxy=socks5://127.0.0.1:10808<span class="hljs-built_in">export</span> http_proxy=http://127.0.0.1:10809<span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:10809<span class="hljs-comment"># 设置http和https代理的用户名和密码（通常不用）</span><span class="hljs-built_in">export</span> http_proxy_user=user<span class="hljs-built_in">export</span> http_proxy_pass=pass<span class="hljs-built_in">export</span> https_proxy_user=user<span class="hljs-built_in">export</span> https_proxy_pass=pass<span class="hljs-comment"># 恢复，清除代理</span><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-built_in">export</span> https_proxy=<span class="hljs-comment"># 设置不走代理的网站ip，用逗号隔开</span><span class="hljs-built_in">export</span> no_proxy=192.168.*.*,*.<span class="hljs-built_in">local</span>,localhost,127.0.0.1</code></pre><h2 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试"></a>结果测试</h2><p>代理设置完成后，就可以使用命令“<strong>curl <a href="http://www.google.com/">www.google.com</a></strong>”进行测试，若能成功下载谷歌的网页信息，即代表终端的代理设置成功。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果使用“<strong>socks</strong>”方式进行代理，直接使用“<strong>pip install</strong>”命令进行下载时，有时会出现错误”<strong>ERROR: Could not install packages due to an Environment Error: Missing dependencies for SOCKS support.</strong>“，那是因为pip缺少了相关的依赖模块。</p><p><img src="/images/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/piperror.png" srcset="/img/loading.gif" alt="pip error"></p><p>只需先清除掉代理，然后使用命令“<strong>pip install pysocks</strong>”下载pysocks模块即可解决。</p><p><img src="/images/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/solve.png" srcset="/img/loading.gif" alt="solve"></p>]]></content>
    
    
    <categories>
      
      <category>Terminal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>terminal</tag>
      
      <tag>proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端实现远程连接与文件传输</title>
    <link href="/%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93.html"/>
    <url>/%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93.html</url>
    
    <content type="html"><![CDATA[<p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，SSH 通过在网络中创建安全隧道来实现 SSH 客户端与服务器之间的安全连接，现实中最常用于远程登录系统。SSH 是一种网络协议，其中最常用的实现是 OpenSSH。</p><h1 id="SSH-服务的安装及开启"><a href="#SSH-服务的安装及开启" class="headerlink" title="SSH 服务的安装及开启"></a>SSH 服务的安装及开启</h1><p>SSH 分为服务端软件和客户端软件，只有在被连接机器使用服务端软件开启 SSH 服务，远程的机器才能使用客户端软件在终端进行连接。若只想在用自己的电脑连接远程服务器，只需下载 SSH 客户端软件即可。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在 windows 系统中，可以在<strong>设置-&gt;应用-&gt;可选功能-&gt;添加功能</strong>里安装 SSH 的服务端软件和客户端软件：<br><img src="/images/ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/Windows%E8%AE%BE%E7%BD%AE%E5%BC%80%E5%90%AFssh.png" srcset="/img/loading.gif" alt="gitfile"><br>安装之后在以管理员身份运行的终端对服务端 SSH 软件进行控制：</p><pre><code class="hljs shell">net start sshd  #开启ssh服务net stop sshd   #关闭ssh服务</code></pre><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>在 Linux 系统中，可以使用 <strong>dpkg</strong> 命令确认是否已经安装了相应的 SSH 软件，若出现以下两行，则证明已安装好了：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> dpkg -l | grep ssh</span>ii  openssh-client  1:8.2p1-4   amd64   secure shell (SSH) client, for secure access to remote machinesii  openssh-server  1:8.2p1-4   amd64   secure shell (SSH) server, for secure access from remote machines</code></pre><p>若系统没有默认安装，则可使用 <strong>apt</strong> 命令进行下载安装：</p><pre><code class="hljs shell">sudo apt-get install openssh-client #安装客户端sshsudo apt-get install openssh-server #安装服务端ssh</code></pre><p>安装之后同样在终端进行 SSH 服务的控制：</p><pre><code class="hljs shell">sudo service ssh start  #开启ssh服务sudo service ssh stop   #关闭ssh服务sudo service ssh status #查看ssh服务状态</code></pre><h1 id="SSH的两种登录方式"><a href="#SSH的两种登录方式" class="headerlink" title="SSH的两种登录方式"></a>SSH的两种登录方式</h1><h2 id="口令登录"><a href="#口令登录" class="headerlink" title="口令登录"></a>口令登录</h2><p>口令登录十分简单，命令格式为: <strong>ssh remote_username@remote_ip</strong>，如：</p><pre><code class="hljs shell">ssh xiaoming@192.168.0.15ssh -p 123 xiaoming@192.168.0.15  #在服务器的123号端口登录</code></pre><p>输入该命令后紧接着按提示输入密码即可。</p><h2 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h2><ol><li>在本机生成密钥对<br>首先在本机使用命令生成密钥对：<pre><code class="hljs shell">ssh-keygen -t rsa   #&#x27;-t&#x27;表示类型选项，代表采用rsa加密算法</code></pre>输入命令后根据提示一步步的按Enter键即可，其中passphrase为私钥口令，一般为空。完成后即可在命令行提示的路径下生成私钥文件 <strong>id_rsa</strong> 和公钥文件 <strong>id_rsa.pub</strong>。</li><li>将公钥复制到服务器中<br>拥有了公钥和密钥之后，需要将公钥文件（id_rsa.pub）的内容添加到服务器的 “/home/user/.ssh/authorized_key” 文件的尾部。</li><li>使用私钥远程连接<br>最后在本机中使用ssh命令进行连接即可，如：<pre><code class="hljs shell">ssh xiaoming@192.168.0.15   #默认使用用户目录下&#x27;~/.ssh/id_rsa&#x27;的私钥进行连接ssh -i /path/id_rsa xiaoming@192.168.0.15  #使用路径path下的私钥进行连接</code></pre></li></ol><blockquote><p><strong>Tips</strong>:<br>需要确保服务器 SSH 配置文件（’/etc/ssh/sshd_config’）里”PubkeyAuthentication”项为”yes”。</p></blockquote><h1 id="终端文件传输"><a href="#终端文件传输" class="headerlink" title="终端文件传输"></a>终端文件传输</h1><p>在 SSH 的基础上，终端的文件传输十分方便，只需要在本机使用 <strong>scp</strong> 命令即可：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 从本地复制一个文件到远程服务器</span>scp local_file remote_username@remote_ip:remote_folderscp local_file remote_username@remote_ip:remote_file<span class="hljs-meta">#</span><span class="bash"> 从远程服务器拷贝一个文件到本地</span>scp remote_username@remote_ip:remote_file local_filescp remote_username@remote_ip:remote_file local_folder</code></pre><p>在复制整个文件夹时，需要加上参数’-r’:</p><pre><code class="hljs shell">scp -r local_folder remote_username@remote_ip:remote_folderscp -r local_folder remote_ip:remote_folder</code></pre>]]></content>
    
    
    <categories>
      
      <category>Terminal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>terminal</tag>
      
      <tag>ssh</tag>
      
      <tag>scp</tag>
      
      <tag>远程连接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 常用命令整合</title>
    <link href="/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E5%90%88.html"/>
    <url>/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E5%90%88.html</url>
    
    <content type="html"><![CDATA[<h3 id="安装完git后首先需要设置用户名和邮箱"><a href="#安装完git后首先需要设置用户名和邮箱" class="headerlink" title="安装完git后首先需要设置用户名和邮箱"></a>安装完git后首先需要设置用户名和邮箱</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;Jagon&quot;</span> </span><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;Jagon@example.com&quot;</span></span></code></pre><h3 id="列出所有-Git-当时能找到的配置"><a href="#列出所有-Git-当时能找到的配置" class="headerlink" title="列出所有 Git 当时能找到的配置"></a>列出所有 Git 当时能找到的配置</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --list</span>user.name=John Doe user.email=johndoe@example.com ...</code></pre><h3 id="查看某一项的设置"><a href="#查看某一项的设置" class="headerlink" title="查看某一项的设置"></a>查看某一项的设置</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config user.name</span>John Doe</code></pre><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">help</span> &lt;verb&gt; </span></code></pre><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git init</span></code></pre><h3 id="克隆一个仓库到本地"><a href="#克隆一个仓库到本地" class="headerlink" title="克隆一个仓库到本地"></a>克隆一个仓库到本地</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2</span><span class="hljs-meta">#</span><span class="bash"> 与上一命令相同，只不过在本地的仓库名字改为<span class="hljs-string">&quot;mylibgit&quot;</span></span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit</span></code></pre><h3 id="查看当前仓库状态"><a href="#查看当前仓库状态" class="headerlink" title="查看当前仓库状态"></a>查看当前仓库状态</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status</span></code></pre><h3 id="追踪新文件"><a href="#追踪新文件" class="headerlink" title="追踪新文件"></a>追踪新文件</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add *</span></code></pre><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rm README</span></code></pre><h3 id="让文件保留在磁盘，但是并不想让-Git-继续跟踪"><a href="#让文件保留在磁盘，但是并不想让-Git-继续跟踪" class="headerlink" title="让文件保留在磁盘，但是并不想让 Git 继续跟踪"></a>让文件保留在磁盘，但是并不想让 Git 继续跟踪</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rm --cached README</span></code></pre><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git mv file_from file_to</span></code></pre><h3 id="查看尚未暂存的文件更新了哪些部分"><a href="#查看尚未暂存的文件更新了哪些部分" class="headerlink" title="查看尚未暂存的文件更新了哪些部分"></a>查看尚未暂存的文件更新了哪些部分</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff</span><span class="hljs-meta">#</span><span class="bash"> 查看已暂存的将要添加到下次提交里的内容</span><span class="hljs-meta">$</span><span class="bash"> git diff --cached </span></code></pre><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;Story 182: Fix benchmarks for speed&quot;</span></span></code></pre><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><span class="hljs-meta">#</span><span class="bash"> 加 -p 显示每次提交的内容差异，加上-2来仅显示最近两次提交</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -p -2</span><span class="hljs-meta">#</span><span class="bash"> 加 --<span class="hljs-built_in">stat</span> 显示每次提交的简略的统计信息</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span></code></pre><h3 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit --amend</span></code></pre><h3 id="取消暂存文件"><a href="#取消暂存文件" class="headerlink" title="取消暂存文件"></a>取消暂存文件</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset HEAD CONTRIBUTING.md</span></code></pre><h3 id="撤销更改"><a href="#撤销更改" class="headerlink" title="撤销更改"></a>撤销更改</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -<span class="hljs-comment"># CONTRIBUTING.md</span></span></code></pre><h3 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote</span>origin<span class="hljs-meta">#</span><span class="bash"> -v会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL</span><span class="hljs-meta">$</span><span class="bash"> git remote -v </span><span class="hljs-meta">#</span><span class="bash"> 要查看某一个远程仓库的更多信息，可以使用 git remote show [remote-name] 命令。</span><span class="hljs-meta">$</span><span class="bash"> git remote show origin</span></code></pre><h3 id="添加一个新的远程-Git-仓库"><a href="#添加一个新的远程-Git-仓库" class="headerlink" title="添加一个新的远程 Git 仓库"></a>添加一个新的远程 Git 仓库</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote add pb https://github.com/paulboone/ticgit</span><span class="hljs-meta">$</span><span class="bash"> git remote</span>originpb</code></pre><h3 id="重命名引用的名字"><a href="#重命名引用的名字" class="headerlink" title="重命名引用的名字"></a>重命名引用的名字</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote rename pb paul</span><span class="hljs-meta">$</span><span class="bash"> git remote</span>originpaul</code></pre><h3 id="移除一个远程仓库"><a href="#移除一个远程仓库" class="headerlink" title="移除一个远程仓库"></a>移除一个远程仓库</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote rm paul</span><span class="hljs-meta">$</span><span class="bash"> git remote</span>origin</code></pre><h3 id="访问远程仓库，从中拉取所有你还没有的数据。-执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。"><a href="#访问远程仓库，从中拉取所有你还没有的数据。-执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。" class="headerlink" title="访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。"></a>访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git fetch [remote-name]</span></code></pre><h3 id="将master分支推送到origin服务器"><a href="#将master分支推送到origin服务器" class="headerlink" title="将master分支推送到origin服务器"></a>将master分支推送到origin服务器</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin master</span></code></pre><h3 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag</span>v0.1v1.3</code></pre><h3 id="如果只对1-8-5系列感兴趣"><a href="#如果只对1-8-5系列感兴趣" class="headerlink" title="如果只对1.8.5系列感兴趣"></a>如果只对1.8.5系列感兴趣</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag -l <span class="hljs-string">&#x27;v1.8.5*&#x27;</span></span>v1.8.5v1.8.5-rc0</code></pre><h3 id="添加一个附注标签"><a href="#添加一个附注标签" class="headerlink" title="添加一个附注标签"></a>添加一个附注标签</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag -a v1.4 -m <span class="hljs-string">&#x27;my version 1.4&#x27;</span></span></code></pre><h3 id="添加一个轻量标签"><a href="#添加一个轻量标签" class="headerlink" title="添加一个轻量标签"></a>添加一个轻量标签</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag v1.4-lw</span></code></pre><h3 id="后期添加标签"><a href="#后期添加标签" class="headerlink" title="后期添加标签"></a>后期添加标签</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --pretty=oneline</span>9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme<span class="hljs-meta">#</span><span class="bash"> 在命令的末尾指定提交的校验和（或部分校验和）:</span><span class="hljs-meta">$</span><span class="bash"> git tag -a v1.2 9fceb02</span></code></pre><h3 id="推送标签到origin服务器上"><a href="#推送标签到origin服务器上" class="headerlink" title="推送标签到origin服务器上"></a>推送标签到origin服务器上</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin v1.5</span></code></pre><h3 id="一次性推送多个标签"><a href="#一次性推送多个标签" class="headerlink" title="一次性推送多个标签"></a>一次性推送多个标签</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin --tags</span></code></pre><h3 id="根据标签创建一个新的分支"><a href="#根据标签创建一个新的分支" class="headerlink" title="根据标签创建一个新的分支"></a>根据标签创建一个新的分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b version2 v2.0.0</span>Switched to a new branch &#x27;version2&#x27;</code></pre><h3 id="定义别名，使“git-unstage-fileA”和“git-reset-HEAD-fileA”等价"><a href="#定义别名，使“git-unstage-fileA”和“git-reset-HEAD-fileA”等价" class="headerlink" title="定义别名，使“git unstage fileA”和“git reset HEAD -### fileA”等价"></a>定义别名，使“git unstage fileA”和“git reset HEAD -### fileA”等价</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global alias.unstage <span class="hljs-string">&#x27;reset HEAD --&#x27;</span></span></code></pre><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --decorate --graph --all</span>* c2b9e (HEAD, master) made other changes| * 87ab2 (testing) made a change|/* f30ab add feature #32 # ability to add new formats to the</code></pre><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch testing </span></code></pre><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout testing </span></code></pre><h3 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支"></a>创建并切换到新分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b testing </span></code></pre><h3 id="将分支testing合并到master中"><a href="#将分支testing合并到master中" class="headerlink" title="将分支testing合并到master中"></a>将分支testing合并到master中</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout master</span>Switched to branch &#x27;master&#x27;<span class="hljs-meta">$</span><span class="bash"> git merge testing</span></code></pre><h3 id="将experiment的修改变基到master上"><a href="#将experiment的修改变基到master上" class="headerlink" title="将experiment的修改变基到master上"></a>将experiment的修改变基到master上</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout experiment</span><span class="hljs-meta">$</span><span class="bash"> git rebase master</span>First, rewinding head to replay your work on top of it...Applying: added staged command</code></pre><h3 id="将server中的修改变基到master上"><a href="#将server中的修改变基到master上" class="headerlink" title="将server中的修改变基到master上"></a>将server中的修改变基到master上</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rebase master server</span></code></pre><h3 id="取出client分支，找出处于client分支和server分支的共同祖先之后的修改，然后把它们在master分支上重放一遍"><a href="#取出client分支，找出处于client分支和server分支的共同祖先之后的修改，然后把它们在master分支上重放一遍" class="headerlink" title="取出client分支，找出处于client分支和server分支的共同祖先之后的修改，然后把它们在master分支上重放一遍"></a>取出client分支，找出处于client分支和server分支的共同祖先之后的修改，然后把它们在master分支上重放一遍</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rebase --onto master server client</span></code></pre><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -d testing</span></code></pre><h3 id="查看分支列表："><a href="#查看分支列表：" class="headerlink" title="查看分支列表："></a>查看分支列表：</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch</span>  iss53* master  testing</code></pre><h3 id="查看每一个分支的最后一次提交"><a href="#查看每一个分支的最后一次提交" class="headerlink" title="查看每一个分支的最后一次提交"></a>查看每一个分支的最后一次提交</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -v</span>  iss53 93b412c fix javascript issue* master 7a98805 Merge branch &#x27;iss53&#x27;  testing 782fd34 add scott to the author list in the readmes</code></pre><h3 id="列出分支列表中已经合并或尚未合并到当前分支的分支。"><a href="#列出分支列表中已经合并或尚未合并到当前分支的分支。" class="headerlink" title="列出分支列表中已经合并或尚未合并到当前分支的分支。"></a>列出分支列表中已经合并或尚未合并到当前分支的分支。</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch --merged<span class="hljs-comment">#查看哪些分支已经合并到当前分支</span></span>  iss53* master<span class="hljs-meta">$</span><span class="bash"> git branch --no-merged <span class="hljs-comment">#查看所有包含未合并工作的分支</span></span>  testing</code></pre><h3 id="无法正常删除还未合并的分支"><a href="#无法正常删除还未合并的分支" class="headerlink" title="无法正常删除还未合并的分支"></a>无法正常删除还未合并的分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -d testing</span>error: The branch &#x27;testing&#x27; is not fully merged.If you are sure you want to delete it, run &#x27;git branch -D testing&#x27;.</code></pre><h3 id="查看远程服务器的分支"><a href="#查看远程服务器的分支" class="headerlink" title="查看远程服务器的分支"></a>查看远程服务器的分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git ls-remote (remote)</span><span class="hljs-meta">$</span><span class="bash"> git remote show (remote)</span></code></pre><h3 id="创建一个跟踪对应远程分支的本地分支，相当于-git-checkout-–track-origin-serverfix"><a href="#创建一个跟踪对应远程分支的本地分支，相当于-git-checkout-–track-origin-serverfix" class="headerlink" title="创建一个跟踪对应远程分支的本地分支，相当于 git checkout –track origin/serverfix"></a>创建一个跟踪对应远程分支的本地分支，相当于 git checkout –track origin/serverfix</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b serverfix teamone/serverfix</span>Branch serverfix set up to track remote branch serverfix from teamone.Switched to a new branch &#x27;serverfix&#x27;</code></pre><h3 id="设置已有的本地分支跟踪一个刚刚拉取下来的远程分支"><a href="#设置已有的本地分支跟踪一个刚刚拉取下来的远程分支" class="headerlink" title="设置已有的本地分支跟踪一个刚刚拉取下来的远程分支"></a>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -u origin/serverfix</span>Branch serverfix set up to track remote branch serverfix from origin.</code></pre><h3 id="推送本地的serverfix分支来更新远程仓库上的serverfix分支。"><a href="#推送本地的serverfix分支来更新远程仓库上的serverfix分支。" class="headerlink" title="推送本地的serverfix分支来更新远程仓库上的serverfix分支。"></a>推送本地的serverfix分支来更新远程仓库上的serverfix分支。</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin serverfix</span></code></pre><h3 id="将本地的serverfix分支推送到远程仓库上的awesomebranch分支。"><a href="#将本地的serverfix分支推送到远程仓库上的awesomebranch分支。" class="headerlink" title="将本地的serverfix分支推送到远程仓库上的awesomebranch分支。"></a>将本地的serverfix分支推送到远程仓库上的awesomebranch分支。</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin serverfix:awesomebranch </span></code></pre><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin --delete serverfix</span>To https://github.com/schacon/simplegit<span class="hljs-meta"> #</span><span class="bash"> [deleted] serverfix</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 基础（粗略笔记）</title>
    <link href="/Git%20%E5%9F%BA%E7%A1%80%20(%E7%B2%97%E7%95%A5%E7%AC%94%E8%AE%B0).html"/>
    <url>/Git%20%E5%9F%BA%E7%A1%80%20(%E7%B2%97%E7%95%A5%E7%AC%94%E8%AE%B0).html</url>
    
    <content type="html"><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p>Git 有三种状态，已提交（committed）、已修改（modified）和已暂存（staged）。<br>Git 项目的三个工作区域的概念：Git 仓库、工作目录和暂存区域。</p><h2 id="git文件生命周期图"><a href="#git文件生命周期图" class="headerlink" title="git文件生命周期图"></a>git文件生命周期图</h2><p><img src="/images/Git/gitfile.png" srcset="/img/loading.gif" alt="gitfile"></p><h2 id="git-初始设置以及查看和帮助命令"><a href="#git-初始设置以及查看和帮助命令" class="headerlink" title="git 初始设置以及查看和帮助命令"></a>git 初始设置以及查看和帮助命令</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装完git后首先需要设置用户名和邮箱</span><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;John Doe&quot;</span> </span><span class="hljs-meta">$</span><span class="bash"> git config --global user.email johndoe@example.com</span><span class="hljs-meta">#</span><span class="bash"> 列出所有 Git 当时能找到的配置</span><span class="hljs-meta">$</span><span class="bash"> git config --list</span>user.name=John Doe user.email=johndoe@example.com color.status=auto ...<span class="hljs-meta">#</span><span class="bash"> 查看某一项的设置</span><span class="hljs-meta">$</span><span class="bash"> git config user.name</span>John Doe<span class="hljs-meta">#</span><span class="bash"> 获取帮助，如 git <span class="hljs-built_in">help</span> config</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">help</span> &lt;verb&gt; </span><span class="hljs-meta">$</span><span class="bash"> git &lt;verb&gt; --<span class="hljs-built_in">help</span> </span><span class="hljs-meta">$</span><span class="bash"> man git-&lt;verb&gt;</span></code></pre><h2 id="初始git仓库命令"><a href="#初始git仓库命令" class="headerlink" title="初始git仓库命令"></a>初始git仓库命令</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 该命令将创建一个名为.git的子目录，这个子目录含有初始化Git仓库中所有的必须文件</span><span class="hljs-meta">$</span><span class="bash"> git init</span><span class="hljs-meta">#</span><span class="bash"> 克隆一个仓库到本地</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2</span><span class="hljs-meta">#</span><span class="bash"> 与上一命令相同，只不过在本地的仓库名字改为<span class="hljs-string">&quot;mylibgit&quot;</span></span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit</span></code></pre><h2 id="配置GitHub的ssh密钥"><a href="#配置GitHub的ssh密钥" class="headerlink" title="配置GitHub的ssh密钥"></a>配置GitHub的ssh密钥</h2><p>默认情况下，用户的 SSH 密钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥。如若没有，可以使用 sh-keygen 命令生成一个密钥：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ssh-keygen </span>Generating public/private rsa key pair. Enter file in which to save the key (/home/schacon/.ssh/id_rsa): Created directory &#x27;/home/schacon/.ssh&#x27;. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/schacon/.ssh/id_rsa. Your public key has been saved in /home/schacon/.ssh/id_rsa.pub. The key fingerprint is:d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local</code></pre><p>首先 ssh-keygen 会确认密钥的存储位置（默认是 .ssh/id_rsa），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。</p><p>最后只需进入github账户，进入账户 SSH keys 页面，点击“Add an SSH key”按钮，给你的公钥起一个名字，将你的<code>~/.ssh/id_rsa.pub</code>（或者自定义的其它名字）公钥文件的内容粘贴到文本区，然后点击`‘Add key’’即可。</p><h2 id="操作git仓库命令"><a href="#操作git仓库命令" class="headerlink" title="操作git仓库命令"></a>操作git仓库命令</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看当前仓库状态</span><span class="hljs-meta">$</span><span class="bash"> git status</span><span class="hljs-meta">#</span><span class="bash"> 追踪新文件</span><span class="hljs-meta">$</span><span class="bash"> git add README</span><span class="hljs-meta">#</span><span class="bash"> 删除文件</span><span class="hljs-meta">$</span><span class="bash"> git rm README</span><span class="hljs-meta">#</span><span class="bash"> 让文件保留在磁盘，但是并不想让 Git 继续跟踪</span><span class="hljs-meta">$</span><span class="bash"> git rm --cached README</span><span class="hljs-meta">#</span><span class="bash"> 移动文件</span><span class="hljs-meta">$</span><span class="bash"> git mv file_from file_to</span></code></pre><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat .gitignore </span><span class="hljs-meta">#</span><span class="bash"> no .a files </span>*.a<span class="hljs-meta">#</span><span class="bash"> but <span class="hljs-keyword">do</span> track lib.a, even though you<span class="hljs-string">&#x27;re ignoring .a files above </span></span>!lib.a<span class="hljs-meta">#</span><span class="bash"> only ignore the TODO file <span class="hljs-keyword">in</span> the current directory, not subdir/TODO </span>/TODO<span class="hljs-meta">#</span><span class="bash"> ignore all files <span class="hljs-keyword">in</span> the build/ directory </span>build/<span class="hljs-meta">#</span><span class="bash"> ignore doc/notes.txt, but not doc/server/arch.txt </span>doc/*.txt<span class="hljs-meta">#</span><span class="bash"> ignore all .pdf files <span class="hljs-keyword">in</span> the doc/ directory </span>doc/**/*.pdf</code></pre><p>规范如下：</p><ol><li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。 </li><li>可以使用标准的 glob 模式匹配。 </li><li>匹配模式可以以（/）开头防止递归。 </li><li>匹配模式可以以（/）结尾指定目录。 </li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反</li></ol><h2 id="查看已暂存和未暂存的修改"><a href="#查看已暂存和未暂存的修改" class="headerlink" title="查看已暂存和未暂存的修改"></a>查看已暂存和未暂存的修改</h2><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff<span class="hljs-comment">#查看尚未暂存的文件更新了哪些部分</span></span><span class="hljs-meta">$</span><span class="bash"> git diff --cached <span class="hljs-comment">#查看已暂存的将要添加到下次提交里的内容</span></span></code></pre><h2 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h2><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit</span><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;Story 182: Fix benchmarks for speed&quot;</span></span></code></pre><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看提交历史</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><span class="hljs-meta">#</span><span class="bash"> 加 -p 显示每次提交的内容差异，加上-2来仅显示最近两次提交</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -p -2</span><span class="hljs-meta">#</span><span class="bash"> 加 --<span class="hljs-built_in">stat</span> 显示每次提交的简略的统计信息</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span><span class="hljs-meta">#</span><span class="bash"> 加 --pretty 可以指定使用不同于默认格式的方式展示提交历史,还有short, full, fuller, format</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --pretty=oneline</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span> --graph <span class="hljs-comment">#加graph可以更形象展示</span></span><span class="hljs-meta">#</span><span class="bash"> 还有更多限制查阅《Pro Git》</span></code></pre><h2 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h2><h3 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h3><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <strong>–amend</strong> 选项的提交命令尝试重新提交：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&#x27;initial commit&#x27;</span></span><span class="hljs-meta">$</span><span class="bash"> git add forgotten_file</span><span class="hljs-meta">$</span><span class="bash"> git commit --amend</span></code></pre><h3 id="取消暂存文件"><a href="#取消暂存文件" class="headerlink" title="取消暂存文件"></a>取消暂存文件</h3><p>使用 <strong>git reset HEAD <fileName></strong> 取消暂存文件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add *</span><span class="hljs-meta">$</span><span class="bash"> git status</span>On branch masterChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)  renamed: README.md -&gt; README  modified: CONTRIBUTING.md<span class="hljs-meta">$</span><span class="bash"> git reset HEAD CONTRIBUTING.md</span></code></pre><h3 id="撤消对文件的修改"><a href="#撤消对文件的修改" class="headerlink" title="撤消对文件的修改"></a>撤消对文件的修改</h3><p>使用 **git  checkout –**，对文件做的任何修改都会消失，相当于只是拷贝了另一个文件来覆盖它。</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status</span>Changes not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in workingdirectory)  modified: CONTRIBUTING.md<span class="hljs-meta">$</span><span class="bash"> git checkout -- CONTRIBUTING.md</span></code></pre><h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用 git remote 查看远程仓库信息，origin是Git给克隆的仓库服务器的默认名字</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/schacon/ticgit</span>Cloning into &#x27;ticgit&#x27;...<span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> ticgit</span><span class="hljs-meta">$</span><span class="bash"> git remote</span>origin<span class="hljs-meta">$</span><span class="bash"> git remote -v <span class="hljs-comment"># -v会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL</span></span><span class="hljs-meta">#</span><span class="bash"> 要查看某一个远程仓库的更多信息，可以使用 git remote show [remote-name] 命令。</span><span class="hljs-meta">$</span><span class="bash"> git remote show origin</span></code></pre><h3 id="添加、移除与重命名远程仓库"><a href="#添加、移除与重命名远程仓库" class="headerlink" title="添加、移除与重命名远程仓库"></a>添加、移除与重命名远程仓库</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加一个新的远程 Git 仓库</span><span class="hljs-meta">$</span><span class="bash"> git remote add pb https://github.com/paulboone/ticgit</span><span class="hljs-meta">$</span><span class="bash"> git remote</span>originpb<span class="hljs-meta">#</span><span class="bash"> 重命名引用的名字</span><span class="hljs-meta">$</span><span class="bash"> git remote rename pb paul</span><span class="hljs-meta">$</span><span class="bash"> git remote</span>originpaul<span class="hljs-meta">#</span><span class="bash"> 移除一个远程仓库</span><span class="hljs-meta">$</span><span class="bash"> git remote rm paul</span><span class="hljs-meta">$</span><span class="bash"> git remote</span>origin</code></pre><h3 id="抓取和推送远程仓库"><a href="#抓取和推送远程仓库" class="headerlink" title="抓取和推送远程仓库"></a>抓取和推送远程仓库</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</span><span class="hljs-meta">$</span><span class="bash"> git fetch [remote-name]</span><span class="hljs-meta">#</span><span class="bash"> 将master分支推送到origin服务器</span><span class="hljs-meta">$</span><span class="bash"> git push origin master</span></code></pre><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><p>Git 可以给历史中的某一个提交打上标签，以示重要。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出标签</span><span class="hljs-meta">$</span><span class="bash"> git tag</span>v0.1v1.3<span class="hljs-meta">#</span><span class="bash"> 如果只对1.8.5系列感兴趣</span><span class="hljs-meta">$</span><span class="bash"> git tag -l <span class="hljs-string">&#x27;v1.8.5*&#x27;</span></span>v1.8.5v1.8.5-rc0</code></pre><p>标签分为<strong>轻量标签</strong>（lightweight）与<strong>附注标签</strong>（annotated）。一个<strong>轻量标签</strong>很像一个不会改变的分支，它只是一个特定提交的引用。<strong>附注标签</strong>是存储在 Git 数据库中的一个完整对象。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加一个附注标签</span><span class="hljs-meta">$</span><span class="bash"> git tag -a v1.4 -m <span class="hljs-string">&#x27;my version 1.4&#x27;</span></span><span class="hljs-meta">#</span><span class="bash"> 添加一个轻量标签</span><span class="hljs-meta">$</span><span class="bash"> git tag v1.4-lw</span></code></pre><p>Git可以后期打标签</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --pretty=oneline</span>166ae0c4d3f420721acbb115cc33848dfcc2121a started write support9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme<span class="hljs-meta">#</span><span class="bash"> 在命令的末尾指定提交的校验和（或部分校验和）:</span><span class="hljs-meta">$</span><span class="bash"> git tag -a v1.2 9fceb02</span></code></pre><p>默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 推送标签到origin服务器上</span><span class="hljs-meta">$</span><span class="bash"> git push origin v1.5</span><span class="hljs-meta">#</span><span class="bash"> 一次性推送多个标签</span><span class="hljs-meta">$</span><span class="bash"> git push origin --tags</span></code></pre><p>在 Git 中并不能真的检出一个标签，因为它们并不能像分支一样来回移动。如果想要工作目录与仓库中特定的标签版本完全一样，可以使用 <strong>git checkout -b [branchname] [tagname]</strong> 在特定的标签上创建一个新分支：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b version2 v2.0.0</span>Switched to a new branch &#x27;version2&#x27;</code></pre><p>当然，如果在这之后又进行了一次提交，version2 分支会因为改动向前移动了，那么 version2 分支就会和 v2.0.0 标签稍微有些不同，这时就应该当心了。</p><h2 id="Git-别名"><a href="#Git-别名" class="headerlink" title="Git 别名"></a>Git 别名</h2><p>可以通过 <strong>git config</strong> 文件来轻松地为每一个命令设置一个别名。 </p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使 “git unstage fileA” 和 “git reset HEAD -- fileA” 等价</span><span class="hljs-meta">$</span><span class="bash"> git config --global alias.unstage <span class="hljs-string">&#x27;reset HEAD --&#x27;</span></span></code></pre><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>Git 有一个名为 HEAD 的特殊指针，指向当前所在的本地分支。可以简单地使用 <strong>git log</strong> 命令查看各个分支当前所指的对象。 提供这一功能的参数是 <strong>–decorate</strong>。</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --decorate --graph --all</span>* c2b9e (HEAD, master) made other changes| * 87ab2 (testing) made a change|/* f30ab add feature #32 - ability to add new formats to the* 34ac2 fixed bug #1328 - stack overflow under certain conditions* 98ca9 initial commit of my project</code></pre><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch testing </span></code></pre><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout testing </span><span class="hljs-meta">#</span><span class="bash">若要新建一个分支并同时切换到新分支，可以在checkout后面加 -b</span><span class="hljs-meta">$</span><span class="bash"> git checkout -b testing </span></code></pre><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 若想将分支testing合并到master中</span><span class="hljs-meta">$</span><span class="bash"> git checkout master</span>Switched to branch &#x27;master&#x27;<span class="hljs-meta">$</span><span class="bash"> git merge testing</span></code></pre><h2 id="分支变基"><a href="#分支变基" class="headerlink" title="分支变基"></a>分支变基</h2><p>变基的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖 先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout experiment</span><span class="hljs-meta">$</span><span class="bash"> git rebase master</span>First, rewinding head to replay your work on top of it...Applying: added staged command</code></pre><p><img src="/images/Git/rebase.png" srcset="/img/loading.gif" alt="rebase"></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将server中的修改变基到master上</span><span class="hljs-meta">$</span><span class="bash"> git rebase master server</span><span class="hljs-meta">#</span><span class="bash"> 取出client分支，找出处于client分支和server分支的共同祖先之后的修改，然后把它们在master分支上重放一遍</span><span class="hljs-meta">$</span><span class="bash"> git rebase --onto master server client</span></code></pre><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -d testing</span></code></pre><h2 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h2><p> 产生合并冲突时，Git会暂停下来，等待你去解决合并产生的冲突。 你可以在合并冲突后的任意时刻使用 git status 命令来查看那些因包含合并冲突而处于未合并 （unmerged）状态的文件： </p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status</span>On branch masterYou have unmerged paths.  (fix conflicts and run &quot;git commit&quot;)Unmerged paths:  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)  both modified: index.htmlno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;</code></pre><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> git branch 不加任何参数运行它，会得到当前所有分支的一个列表：</span><span class="hljs-meta">$</span><span class="bash"> git branch</span>  iss53* master  testing  <span class="hljs-meta">#</span><span class="bash"> 如果需要查看每一个分支的最后一次提交，可以运行 git branch -v 命令：</span><span class="hljs-meta">$</span><span class="bash"> git branch -v</span>  iss53 93b412c fix javascript issue* master 7a98805 Merge branch &#x27;iss53&#x27;  testing 782fd34 add scott to the author list in the readmes<span class="hljs-meta">#</span><span class="bash"> --merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。</span><span class="hljs-meta">$</span><span class="bash"> git branch --merged<span class="hljs-comment">#查看哪些分支已经合并到当前分支</span></span>  iss53* master<span class="hljs-meta">$</span><span class="bash"> git branch --no-merged <span class="hljs-comment">#查看所有包含未合并工作的分支</span></span>  testing  <span class="hljs-meta">#</span><span class="bash"> 由于此时testing分支还未合并，所以无法正常删除</span><span class="hljs-meta">$</span><span class="bash"> git branch -d testing</span>error: The branch &#x27;testing&#x27; is not fully merged.If you are sure you want to delete it, run &#x27;git branch -D testing&#x27;.</code></pre><h2 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h2><p>远程引用是对远程仓库的引用（指针），包括分支、标签等等。你可以通过 <strong>git ls-remote (remote)</strong> 来 显式地获得远程引用的完整列表，或者通过 <strong>git remote show (remote)</strong> 获得远程分支的更多信息。</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git ls-remote (remote)</span><span class="hljs-meta">$</span><span class="bash"> git remote show (remote)</span></code></pre><h2 id="抓取远程分支"><a href="#抓取远程分支" class="headerlink" title="抓取远程分支"></a>抓取远程分支</h2><p>当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然 后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git fetch teamone</span>remote: Counting objects: 7, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 3 (delta 0)Unpacking objects: 100% (3/3), done.From https://github.com/schacon/simplegit * [new branch] serverfix -&gt; teamone/serverfix</code></pre><h2 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h2><p>当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。可以运行 <strong>git merge teamone/serverfix</strong> 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 相当于 git checkout --track origin/serverfix</span><span class="hljs-meta">$</span><span class="bash"> git checkout -b serverfix teamone/serverfix</span>Branch serverfix set up to track remote branch serverfix from teamone.Switched to a new branch &#x27;serverfix&#x27;<span class="hljs-meta">#</span><span class="bash"> 设置已有的本地分支跟踪一个刚刚拉取下来的远程分支</span><span class="hljs-meta">$</span><span class="bash"> git branch -u origin/serverfix</span>Branch serverfix set up to track remote branch serverfix from origin.</code></pre><h2 id="推送远程分支"><a href="#推送远程分支" class="headerlink" title="推送远程分支"></a>推送远程分支</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 推送本地的serverfix分支来更新远程仓库上的serverfix分支。</span><span class="hljs-meta">$</span><span class="bash"> git push origin serverfix</span><span class="hljs-meta">#</span><span class="bash"> 将本地的serverfix分支推送到远程仓库上的awesomebranch分支。</span><span class="hljs-meta">$</span><span class="bash"> git push origin serverfix:awesomebranch </span></code></pre><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><p>可以运行带有 <strong>–delete</strong> 选项的 <strong>git push</strong> 命令来删 除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin --delete serverfix</span>To https://github.com/schacon/simplegit - [deleted] serverfix</code></pre>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA 桥方法</title>
    <link href="/JAVA%20%E6%A1%A5%E6%96%B9%E6%B3%95.html"/>
    <url>/JAVA%20%E6%A1%A5%E6%96%B9%E6%B3%95.html</url>
    
    <content type="html"><![CDATA[<h1 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h1><h2 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h2><p>我们知道在java中定义一个泛型类型时，编译时会自动提供一个相应的原始类型，而原始类型的名字就是删去类型参数后的泛型类型名。并在类声明内部里，会擦除类型变量，并替换为限定类型（无限定的变量用Object），如：</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Holder</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Comparable</span> &amp; <span class="hljs-title">Serializable</span>&gt;</span><span class="hljs-class"></span>&#123;    T content;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T content)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">this</span>.content = content;    &#125;    <span class="hljs-function">T <span class="hljs-title">get</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> content;    &#125;&#125;</code></pre><p>原始类型为</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Holder</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Comparable</span> &amp; <span class="hljs-title">Serializable</span>&gt;</span><span class="hljs-class"></span>&#123;    Comparable content;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(Comparable content)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">this</span>.content = content;    &#125;    <span class="hljs-function">Comparable <span class="hljs-title">get</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> content;    &#125;&#125;</code></pre><p>注：如果泛型是“T extends Seralizable &amp; Comparable”，原始类型则用Seriable替换T，而编译器在必要时向Comparable插入强制类型转换。固为提高效率，可以将标签接口（没有方法的接口）放在边界列表的末尾。</p><h2 id="翻译泛型表达式"><a href="#翻译泛型表达式" class="headerlink" title="翻译泛型表达式"></a>翻译泛型表达式</h2><p>当程序调用泛型方法时，如果擦除返回类型，编译器就会插入强制类型转换。如下情况：</p><pre><code class="hljs java">Holder&lt;String&gt; tmp = ...;String str = tmp.get();</code></pre><p>由于擦除后get的返回类型为Object，编译器就会把这个方法调用翻译为两条虚拟机指令</p><ul><li>对原始方法Holder.get的调用</li><li>将返回的Object类型强制转换为String类型</li></ul><p>相应的泛型方法中输入一个泛型参数或者直接对泛型成员进行赋值等情况下也都需要插入一个强制类型转换，如下情况：</p><pre><code class="hljs java">tmp.content = str;tmp.set(str);</code></pre><h1 id="桥方法"><a href="#桥方法" class="headerlink" title="桥方法"></a>桥方法</h1><h2 id="类型擦除带来的问题"><a href="#类型擦除带来的问题" class="headerlink" title="类型擦除带来的问题"></a>类型擦除带来的问题</h2><p>我们看到以下示例：</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">father</span>&lt;<span class="hljs-title">T</span>&gt;</span><span class="hljs-class"></span>&#123;    T <span class="hljs-keyword">var</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">father</span><span class="hljs-params">(T v)</span></span><span class="hljs-function">    </span>&#123;        set(v);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T v)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">var</span> = v;        out.println(<span class="hljs-string">&quot;The father is setting the variable&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        out.println(<span class="hljs-string">&quot;The father is returning the variable&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">var</span>;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">father</span>&lt;<span class="hljs-title">String</span>&gt;</span><span class="hljs-class"></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">father</span><span class="hljs-params">(String s)</span></span><span class="hljs-function">    </span>&#123;        set(s);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String s)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">var</span> = s;        out.println(<span class="hljs-string">&quot;The son is setting the variable&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        out.println(<span class="hljs-string">&quot;The son is returning the variable&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">var</span>;    &#125;&#125;</code></pre><p>从上面简单的代码中，我们可以看到，类son继承了泛型类father，并好像“覆盖”了father的两个方法。但是利用反射，提取出son的所有方法后，结果却令人大跌眼镜：</p><pre><code class="hljs java">Class c = son.class;Method methods[] = c.getDeclaredMethods();<span class="hljs-keyword">for</span> (Method m : methods) &#123;    out.println(m);&#125;<span class="hljs-comment">/************OUT PUT**************</span><span class="hljs-comment">java.lang.Object demo.son.get()</span><span class="hljs-comment">java.lang.String demo.son.get()</span><span class="hljs-comment">void demo.son.set(java.lang.String)</span><span class="hljs-comment">void demo.son.set(java.lang.Object)</span><span class="hljs-comment">**********************************/</span></code></pre><p>从结果上可以看到，类son并没有覆盖掉父类的两个方法，而是将它们继承了下来。仔细一想，毕竟类型擦除之后，父类的两个方法参数和结果都是Object类型，与son类方法签名不同，是应该不被覆盖的。但是他们又不应该不一样，考虑下面的情形：</p><pre><code class="hljs java">father tmp = <span class="hljs-keyword">new</span> son();tmp.set(<span class="hljs-string">&quot;hello world&quot;</span>);</code></pre><p>这里我们是希望对set方法的调用是具有多态性的，这样才能调用到最合适的那个方法，即应该调用son.set(),但是类型擦拭却和多态发生了冲突。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>为了解决上面的问题，编译器在son类中添加多了一个桥方法：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(Object <span class="hljs-keyword">var</span>)</span></span><span class="hljs-function"></span>&#123;    set((String) <span class="hljs-keyword">var</span>)&#125;</code></pre><p>而这时候，虚拟机再用tmp引用的对象调用这个方法时，由于这个方法对象是son类型的，因而将会调用son.set(Object)(因为多态)，这个方法是合成的桥方法。在这个桥方法里面，它调用son.set(String)，而就是我们期待的结果了。<br>而桥方法有时候会让事情变得奇怪，如在上面我们还写多了一个get方法，这样最终在son类里面，就会有两个get方法：</p><blockquote><p>public Object get()<br>public String get()</p></blockquote><p>我们会发现，在自己编写代码时，这是不被允许的，因为他们的参数类型是相同的。但是在虚拟机里，它是用参数类型和返回类型确定一个方法。因此，编译器可能产生两个仅返回类型不同的方法字节码，虚拟机能够正确处理这种情况。</p><h2 id="桥方法与覆盖"><a href="#桥方法与覆盖" class="headerlink" title="桥方法与覆盖"></a>桥方法与覆盖</h2><p>事实上，桥方法不仅只用于覆盖。我们知道，在一个方法覆盖另一个方法时可以指定一个更严格的返回类型，如：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span>&#123;...&#125;&#125;</code></pre><p>Object.clone和Employee.clone方法被说成具有协变的返回类型。实际上，Employee类有两个克隆方法</p><ul><li>Employee clone()</li><li>Object clone() //桥方法</li></ul><p>合成的桥方法调用了新定义的方法</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>语言特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>About</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Categories</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Tags</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
